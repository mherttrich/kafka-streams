/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package de.micha.events;  
@SuppressWarnings("all")
/** Represents an tweet */
@org.apache.avro.specific.AvroGenerated
public class Tweet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tweet\",\"namespace\":\"de.micha.events\",\"doc\":\"Represents an tweet\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"doc\":\"this tweet id\"},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the message\"},{\"name\":\"ip\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"ip address, where it comes from\"},{\"name\":\"user\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"login name of the user\"},{\"name\":\"receivedTime\",\"type\":[\"null\",\"long\"],\"doc\":\"timestamp in ms\"},{\"name\":\"size\",\"type\":[\"null\",\"long\"],\"doc\":\"size of message\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** this tweet id */
  @Deprecated public Integer id;
  /** the message */
  @Deprecated public String message;
  /** ip address, where it comes from */
  @Deprecated public String ip;
  /** login name of the user */
  @Deprecated public String user;
  /** timestamp in ms */
  @Deprecated public Long receivedTime;
  /** size of message */
  @Deprecated public Long size;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Tweet() {}

  /**
   * All-args constructor.
   */
  public Tweet(Integer id, String message, String ip, String user, Long receivedTime, Long size) {
    this.id = id;
    this.message = message;
    this.ip = ip;
    this.user = user;
    this.receivedTime = receivedTime;
    this.size = size;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return message;
    case 2: return ip;
    case 3: return user;
    case 4: return receivedTime;
    case 5: return size;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (Integer)value$; break;
    case 1: message = (String)value$; break;
    case 2: ip = (String)value$; break;
    case 3: user = (String)value$; break;
    case 4: receivedTime = (Long)value$; break;
    case 5: size = (Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * this tweet id   */
  public Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * this tweet id   * @param value the value to set.
   */
  public void setId(Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'message' field.
   * the message   */
  public String getMessage() {
    return message;
  }

  /**
   * Sets the value of the 'message' field.
   * the message   * @param value the value to set.
   */
  public void setMessage(String value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'ip' field.
   * ip address, where it comes from   */
  public String getIp() {
    return ip;
  }

  /**
   * Sets the value of the 'ip' field.
   * ip address, where it comes from   * @param value the value to set.
   */
  public void setIp(String value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'user' field.
   * login name of the user   */
  public String getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * login name of the user   * @param value the value to set.
   */
  public void setUser(String value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'receivedTime' field.
   * timestamp in ms   */
  public Long getReceivedTime() {
    return receivedTime;
  }

  /**
   * Sets the value of the 'receivedTime' field.
   * timestamp in ms   * @param value the value to set.
   */
  public void setReceivedTime(Long value) {
    this.receivedTime = value;
  }

  /**
   * Gets the value of the 'size' field.
   * size of message   */
  public Long getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * size of message   * @param value the value to set.
   */
  public void setSize(Long value) {
    this.size = value;
  }

  /** Creates a new Tweet RecordBuilder */
  public static de.micha.events.Tweet.Builder newBuilder() {
    return new de.micha.events.Tweet.Builder();
  }

  /** Creates a new Tweet RecordBuilder by copying an existing Builder */
  public static de.micha.events.Tweet.Builder newBuilder(de.micha.events.Tweet.Builder other) {
    return new de.micha.events.Tweet.Builder(other);
  }

  /** Creates a new Tweet RecordBuilder by copying an existing Tweet instance */
  public static de.micha.events.Tweet.Builder newBuilder(de.micha.events.Tweet other) {
    return new de.micha.events.Tweet.Builder(other);
  }

  /**
   * RecordBuilder for Tweet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Tweet>
    implements org.apache.avro.data.RecordBuilder<Tweet> {

    private Integer id;
    private String message;
    private String ip;
    private String user;
    private Long receivedTime;
    private Long size;

    /** Creates a new Builder */
    private Builder() {
      super(de.micha.events.Tweet.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(de.micha.events.Tweet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ip)) {
        this.ip = data().deepCopy(fields()[2].schema(), other.ip);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.user)) {
        this.user = data().deepCopy(fields()[3].schema(), other.user);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.receivedTime)) {
        this.receivedTime = data().deepCopy(fields()[4].schema(), other.receivedTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.size)) {
        this.size = data().deepCopy(fields()[5].schema(), other.size);
        fieldSetFlags()[5] = true;
      }
    }

    /** Creates a Builder by copying an existing Tweet instance */
    private Builder(de.micha.events.Tweet other) {
            super(de.micha.events.Tweet.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ip)) {
        this.ip = data().deepCopy(fields()[2].schema(), other.ip);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.user)) {
        this.user = data().deepCopy(fields()[3].schema(), other.user);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.receivedTime)) {
        this.receivedTime = data().deepCopy(fields()[4].schema(), other.receivedTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.size)) {
        this.size = data().deepCopy(fields()[5].schema(), other.size);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public Integer getId() {
      return id;
    }

    /** Sets the value of the 'id' field */
    public de.micha.events.Tweet.Builder setId(Integer value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'id' field */
    public de.micha.events.Tweet.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'message' field */
    public String getMessage() {
      return message;
    }

    /** Sets the value of the 'message' field */
    public de.micha.events.Tweet.Builder setMessage(String value) {
      validate(fields()[1], value);
      this.message = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'message' field has been set */
    public boolean hasMessage() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'message' field */
    public de.micha.events.Tweet.Builder clearMessage() {
      message = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'ip' field */
    public String getIp() {
      return ip;
    }

    /** Sets the value of the 'ip' field */
    public de.micha.events.Tweet.Builder setIp(String value) {
      validate(fields()[2], value);
      this.ip = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'ip' field has been set */
    public boolean hasIp() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'ip' field */
    public de.micha.events.Tweet.Builder clearIp() {
      ip = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'user' field */
    public String getUser() {
      return user;
    }

    /** Sets the value of the 'user' field */
    public de.micha.events.Tweet.Builder setUser(String value) {
      validate(fields()[3], value);
      this.user = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /** Checks whether the 'user' field has been set */
    public boolean hasUser() {
      return fieldSetFlags()[3];
    }

    /** Clears the value of the 'user' field */
    public de.micha.events.Tweet.Builder clearUser() {
      user = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'receivedTime' field */
    public Long getReceivedTime() {
      return receivedTime;
    }

    /** Sets the value of the 'receivedTime' field */
    public de.micha.events.Tweet.Builder setReceivedTime(Long value) {
      validate(fields()[4], value);
      this.receivedTime = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /** Checks whether the 'receivedTime' field has been set */
    public boolean hasReceivedTime() {
      return fieldSetFlags()[4];
    }

    /** Clears the value of the 'receivedTime' field */
    public de.micha.events.Tweet.Builder clearReceivedTime() {
      receivedTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'size' field */
    public Long getSize() {
      return size;
    }

    /** Sets the value of the 'size' field */
    public de.micha.events.Tweet.Builder setSize(Long value) {
      validate(fields()[5], value);
      this.size = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /** Checks whether the 'size' field has been set */
    public boolean hasSize() {
      return fieldSetFlags()[5];
    }

    /** Clears the value of the 'size' field */
    public de.micha.events.Tweet.Builder clearSize() {
      size = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Tweet build() {
      try {
        Tweet record = new Tweet();
        record.id = fieldSetFlags()[0] ? this.id : (Integer) defaultValue(fields()[0]);
        record.message = fieldSetFlags()[1] ? this.message : (String) defaultValue(fields()[1]);
        record.ip = fieldSetFlags()[2] ? this.ip : (String) defaultValue(fields()[2]);
        record.user = fieldSetFlags()[3] ? this.user : (String) defaultValue(fields()[3]);
        record.receivedTime = fieldSetFlags()[4] ? this.receivedTime : (Long) defaultValue(fields()[4]);
        record.size = fieldSetFlags()[5] ? this.size : (Long) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
